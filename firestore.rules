rules_version = '2'
service cloud.firestore {	
  	match /databases/{database}/documents {
    	// Function to check if user is authorized
    	function isAuthorized() {
      		return request.auth.uid != null
    	}

		match /private/{userId} {
			allow read, write: if (userId == request.auth.uid)
		}

		// Calls
		match /calls/{callId} {
			function callParticipant(resource) {
				return resource.data.creator == request.auth.uid || resource.data.target == request.auth.uid
			}
			allow read, write: if isAuthorized() && callParticipant(resource)
			allow create, list: if isAuthorized()

			function inCall(callId, uid) {
				let data = get(/databases/$(database)/documents/calls/$(callId)).data;
				return data.creator == uid || data.target == uid
			}

			// Offer Canidates
			match /offerCandidates/{offerCandidatesId} {
				allow read, write: if isAuthorized() && inCall(callId, request.auth.uid)
			}

			// Answer Canidates
			match /answerCandidates/{answerCandidatesId} {
				allow read,write: if isAuthorized() && inCall(callId, request.auth.uid)
			}
		}
		
		match /profiles/{profileID} {
			allow read: if isAuthorized()
			allow create, update: if isAuthorized() &&
				(!request.resource.data.displayName) ||
				((profileID == request.auth.uid) &&
				(request.resource.data.displayName is string) &&
				(request.resource.data.displayName.size() > 3) &&				
				get(/databases/$(database)/documents/usernames/$(request.resource.data.displayName)).data.uid == request.auth.uid);

		}

		match /usernames/{username} {
			allow read: if true
			allow delete: if isAuthorized() && (resource.data.uid == request.auth.uid)
			allow create: if isAuthorized() &&
				(request.resource.data.uid is string) &&
				(request.resource.data.uid.size() > 10) &&
				(request.resource.data.uid == request.auth.uid)
		}

		match /walls/{wallId}/messages/{messageId} {
			allow write: if isAuthorized() && 
				(wallId == request.auth.uid) &&
				(request.resource.data.message is string) &&
				(request.resource.data.message.size() > 0)
			allow read: if isAuthorized()
		}
 	}
}